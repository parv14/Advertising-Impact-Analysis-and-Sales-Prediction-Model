# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kJsu5pJSaeTYU-3EfHEaXg6Ke5wVstaC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Load the data
data = pd.read_excel('advertising_sales_data.xlsx', sheet_name='advertising_sales_data')

avg_tv_spend = data['TV'].mean()
print(f"The average amount spent on TV advertising is ${avg_tv_spend:.2f}")

correlation = data['Radio'].corr(data['Sales'])
print(f"The correlation between radio advertising and sales is {correlation:.4f}")

correlations = data[['TV', 'Radio', 'Newspaper']].corrwith(data['Sales'])
highest_impact = correlations.idxmax()
print(f"The advertising medium with the highest impact on sales is {highest_impact}")
print("Correlations:")
print(correlations)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer

# Check for NaN values
print(data.isna().sum())

# Select only the numeric columns for our analysis
numeric_columns = ['TV', 'Radio', 'Newspaper', 'Sales']
data_numeric = data[numeric_columns]

# Option 1: Remove rows with NaN values
data_cleaned = data_numeric.dropna()

# Option 2: Impute NaN values (replace NaNs with mean of the column)
imputer = SimpleImputer(strategy='mean')
data_imputed = pd.DataFrame(imputer.fit_transform(data_numeric), columns=data_numeric.columns)

# Choose which dataset to use (cleaned or imputed)
X = data_imputed[['TV', 'Radio', 'Newspaper']]
y = data_imputed['Sales']

model = LinearRegression()
model.fit(X, y)

predictions = model.predict(X)

plt.figure(figsize=(10, 6))
plt.scatter(y, predictions, color='blue', alpha=0.5)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.show()

print("Model coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef:.4f}")
print(f"Intercept: {model.intercept_:.4f}")
print(f"R-squared: {model.score(X, y):.4f}")

new_data = np.array([[200, 40, 50]])
predicted_sales = model.predict(new_data)
print(f"Predicted sales for TV=$200, Radio=$40, Newspaper=$50: ${predicted_sales[0]:.2f}")

scaler = StandardScaler()
X_normalized = scaler.fit_transform(X)

model_normalized = LinearRegression()
model_normalized.fit(X_normalized, y)

predictions_normalized = model_normalized.predict(X_normalized)

mse = mean_squared_error(y, predictions)
mse_normalized = mean_squared_error(y, predictions_normalized)
r2 = r2_score(y, predictions)
r2_normalized = r2_score(y, predictions_normalized)

print("Original model performance:")
print(f"MSE: {mse:.4f}")
print(f"R-squared: {r2:.4f}")
print("\nNormalized model performance:")
print(f"MSE: {mse_normalized:.4f}")
print(f"R-squared: {r2_normalized:.4f}")

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

# Assuming 'data' and 'y' are already defined
X_reduced = data[['Radio', 'Newspaper']]

# Handle NaN values
imputer = SimpleImputer(strategy='mean')
X_reduced_imputed = pd.DataFrame(imputer.fit_transform(X_reduced), columns=X_reduced.columns)

# Fit the reduced model
model_reduced = LinearRegression()
model_reduced.fit(X_reduced_imputed, y)

# Make predictions
predictions_reduced = model_reduced.predict(X_reduced_imputed)

# Calculate performance metrics
mse_reduced = mean_squared_error(y, predictions_reduced)
r2_reduced = r2_score(y, predictions_reduced)

# Print results
print("Reduced model performance (Radio and Newspaper only):")
print(f"MSE: {mse_reduced:.4f}")
print(f"R-squared: {r2_reduced:.4f}")

print("\nReduced model coefficients:")
for feature, coef in zip(X_reduced.columns, model_reduced.coef_):
    print(f"{feature}: {coef:.4f}")
print(f"Intercept: {model_reduced.intercept_:.4f}")